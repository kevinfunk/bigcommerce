<?php

use Drupal\commerce_order\Entity\OrderInterface;
use Drupal\commerce_stock_local\Entity\StockLocation;
use Drupal\Core\Url;

/**
 * Implements hook_install().
 */
function bigcommerce_stock_install($is_syncing) {
  \Drupal::configFactory()
    ->getEditable('commerce_stock.service_manager')
    ->set('commerce_product_variation_digital_service_id', 'local_stock')
    ->save();
  \Drupal::configFactory()
    ->getEditable('commerce_stock.service_manager')
    ->set('commerce_product_variation_physical_service_id', 'local_stock')
    ->save();

  StockLocation::create([
    'type' => 'bigcommerce',
    'name' => 'default',
    'status' => TRUE,
  ])->save();

  \Drupal::messenger()->addWarning(t('Please make sure to run the bigcommerce_product_variation migration again from the <a href=":link">BigCommerce Product synchronization</a> page to get the initial stock values.', [
    ':link' => Url::fromRoute('bigcommerce.product_sync')->toString(),
  ]));
}

/**
 * Implements hook_cron().
 */
function bigcommerce_stock_cron() {
  \Drupal::service('bigcommerce_stock.cron')->run();
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function bigcommerce_stock_commerce_order_delete(OrderInterface $order) {
  // In case a cart is deleted remove all reserved stock.
  if (empty($order->cart->value)) {
    return;
  }

  $location = current(\Drupal::entityTypeManager()
    ->getStorage('commerce_stock_location')
    ->loadByProperties(['type' => 'bigcommerce']));

  $transactions = \Drupal::database()->select('commerce_stock_transaction', 'st')
    ->fields('st')
    ->condition('related_oid', $order->id())
    ->condition('location_id', $location->id())
    ->execute()->fetchAll();

  foreach ($transactions as $transaction) {
    $query = \Drupal::database()->delete('commerce_stock_transaction');
    $query->condition('id', $transaction->id);
    $query->execute();
  }
}
